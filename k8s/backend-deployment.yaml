apiVersion: apps/v1
kind: Deployment
metadata:
  name: saga-backend
  namespace: saga
  labels:
    app: saga
    component: backend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: saga
      component: backend
  template:
    metadata:
      labels:
        app: saga
        component: backend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: saga-backend
      imagePullSecrets:
      - name: saga-registry
      containers:
      - name: backend
        image: saga/backend:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: actuator
          containerPort: 8081
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://saga-postgres:5432/saga"
        - name: SPRING_DATASOURCE_USERNAME
          value: "saga_user"
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: saga-secrets
              key: db-password
        - name: SPRING_REDIS_HOST
          value: "saga-redis"
        - name: SPRING_REDIS_PORT
          value: "6379"
        - name: SPRING_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: saga-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: saga-secrets
              key: jwt-secret
        - name: JWT_EXPIRATION_MS
          value: "3600000"
        - name: CORS_ALLOWED_ORIGINS
          value: "https://saga.com,https://app.saga.com"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: saga-backend-config
      nodeSelector:
        kubernetes.io/arch: amd64
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - saga
                - key: component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "saga"
        operator: "Equal"
        value: "backend"
        effect: "NoSchedule"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: saga-backend
  namespace: saga
  labels:
    app: saga
    component: backend
---
apiVersion: v1
kind: Service
metadata:
  name: saga-backend
  namespace: saga
  labels:
    app: saga
    component: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: actuator
    port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app: saga
    component: backend
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: saga-backend-config
  namespace: saga
  labels:
    app: saga
    component: backend
data:
  application-prod.yml: |
    spring:
      application:
        name: saga-app
      jpa:
        hibernate:
          ddl-auto: validate
        show-sql: false
      cache:
        type: redis
    
    server:
      port: 8080
      compression:
        enabled: true
      tomcat:
        max-threads: 200
        max-connections: 10000
    
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus
      endpoint:
        health:
          show-details: when-authorized
      metrics:
        export:
          prometheus:
            enabled: true
    
    logging:
      level:
        org.springframework: WARN
        com.saga: INFO
      file:
        name: /app/logs/saga.log 
#!/bin/bash

# üöÄ SAGA FITNESS - DEPLOY COMPLETO SEM LOGIN
# Este script prepara todos os deployments sem fazer login agora
# Voc√™ executa quando tiver criado todas as contas necess√°rias

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Arte ASCII
print_logo() {
    echo -e "${CYAN}"
    echo "   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó "
    echo "   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó"
    echo "   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë"
    echo "   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë"
    echo "   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë"
    echo "   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù"
    echo -e "${NC}"
    echo -e "${GREEN}üèãÔ∏è‚Äç‚ôÇÔ∏è  SAGA FITNESS - DEPLOY COMPLETO  üèãÔ∏è‚Äç‚ôÇÔ∏è${NC}"
    echo -e "${YELLOW}================================================${NC}"
    echo
}

# Fun√ß√£o para exibir menu
show_menu() {
    echo -e "${BLUE}üìã MENU DE DEPLOY SAGA FITNESS${NC}"
    echo -e "${YELLOW}================================${NC}"
    echo -e "${GREEN}1.${NC} üîç Verificar Estrutura do Projeto"
    echo -e "${GREEN}2.${NC} üåê Preparar Deploy Frontend (Netlify)"
    echo -e "${GREEN}3.${NC} üõ†Ô∏è  Preparar Deploy Backend (Railway)"
    echo -e "${GREEN}4.${NC} üì± Preparar Deploy Mobile (Expo)"
    echo -e "${GREEN}5.${NC} üìä Configurar Analytics"
    echo -e "${GREEN}6.${NC} üí∞ Configurar Monetiza√ß√£o"
    echo -e "${GREEN}7.${NC} üßπ Limpar e Organizar Reposit√≥rio"
    echo -e "${GREEN}8.${NC} üìö Gerar Documenta√ß√£o Completa"
    echo -e "${GREEN}9.${NC} üöÄ Executar TUDO (Deploy Completo)"
    echo -e "${GREEN}10.${NC} ‚ùì Mostrar Contas Necess√°rias"
    echo -e "${GREEN}0.${NC} üö™ Sair"
    echo
    echo -e "${CYAN}Digite sua escolha (0-10):${NC}"
}

# Verificar estrutura do projeto
check_project_structure() {
    echo -e "${BLUE}üîç VERIFICANDO ESTRUTURA DO PROJETO...${NC}"
    echo
    
    # Verificar diret√≥rios principais
    directories=(
        "ubuntu/fittrack_final/frontend/frontend_app/hevyclone_frontend_improved"
        "ubuntu/fittrack_final/backend/backend_app/app"
        "SAGA-Mobile"
    )
    
    for dir in "${directories[@]}"; do
        if [ -d "$dir" ]; then
            echo -e "${GREEN}‚úÖ $dir - ENCONTRADO${NC}"
        else
            echo -e "${RED}‚ùå $dir - N√ÉO ENCONTRADO${NC}"
        fi
    done
    
    echo
    echo -e "${BLUE}üìÅ Estrutura atual do projeto:${NC}"
    tree -L 3 -I 'node_modules|.git|dist|build|target' || ls -la
    
    echo
    echo -e "${GREEN}‚úÖ Verifica√ß√£o da estrutura conclu√≠da!${NC}"
    read -p "Pressione Enter para continuar..."
}

# Preparar deploy frontend
prepare_frontend_deploy() {
    echo -e "${BLUE}üåê PREPARANDO DEPLOY FRONTEND (NETLIFY)...${NC}"
    echo
    
    FRONTEND_DIR="ubuntu/fittrack_final/frontend/frontend_app/hevyclone_frontend_improved"
    
    if [ ! -d "$FRONTEND_DIR" ]; then
        echo -e "${RED}‚ùå Diret√≥rio frontend n√£o encontrado!${NC}"
        return 1
    fi
    
    cd "$FRONTEND_DIR"
    
    echo -e "${YELLOW}üì¶ Instalando depend√™ncias do frontend...${NC}"
    if [ -f "package.json" ]; then
        npm install --legacy-peer-deps
    else
        echo -e "${RED}‚ùå package.json n√£o encontrado!${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}üîß Criando arquivos de configura√ß√£o para Netlify...${NC}"
    
    # Criar netlify.toml
    cat > netlify.toml << 'EOF'
[build]
  base = "ubuntu/fittrack_final/frontend/frontend_app/hevyclone_frontend_improved"
  command = "npm run build"
  publish = "dist"

[build.environment]
  NODE_VERSION = "18"
  NPM_FLAGS = "--legacy-peer-deps"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"

[[headers]]
  for = "/static/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
EOF
    
    # Criar _redirects
    cat > public/_redirects << 'EOF'
/*    /index.html   200
EOF
    
    # Criar script de deploy
    cat > deploy-frontend.sh << 'EOF'
#!/bin/bash

echo "üåê FAZENDO DEPLOY DO FRONTEND NO NETLIFY..."

# Verificar se est√° logado no Netlify CLI
if ! command -v netlify &> /dev/null; then
    echo "‚ùå Netlify CLI n√£o encontrado. Instalando..."
    npm install -g netlify-cli
fi

# Login (ser√° solicitado)
echo "üîê Fazendo login no Netlify..."
netlify login

# Deploy
echo "üöÄ Fazendo deploy..."
netlify deploy --prod --dir=dist

echo "‚úÖ Deploy do frontend conclu√≠do!"
EOF
    
    chmod +x deploy-frontend.sh
    
    echo -e "${YELLOW}üèóÔ∏è  Fazendo build do projeto...${NC}"
    npm run build
    
    echo
    echo -e "${GREEN}‚úÖ Frontend preparado para deploy!${NC}"
    echo -e "${CYAN}üìã PR√ìXIMOS PASSOS:${NC}"
    echo -e "${YELLOW}1. Crie conta no Netlify: https://netlify.com${NC}"
    echo -e "${YELLOW}2. Execute: cd $FRONTEND_DIR && ./deploy-frontend.sh${NC}"
    echo -e "${YELLOW}3. Configure vari√°veis de ambiente no Netlify:${NC}"
    echo -e "   - NODE_ENV=production"
    echo -e "   - REACT_APP_API_URL=https://seu-backend.railway.app"
    echo -e "   - REACT_APP_GA_MEASUREMENT_ID=G-XXXXXXXXXX"
    echo -e "   - REACT_APP_STRIPE_PUBLIC_KEY=pk_live_..."
    echo
    
    cd - > /dev/null
    read -p "Pressione Enter para continuar..."
}

# Preparar deploy backend
prepare_backend_deploy() {
    echo -e "${BLUE}üõ†Ô∏è  PREPARANDO DEPLOY BACKEND (RAILWAY)...${NC}"
    echo
    
    BACKEND_DIR="ubuntu/fittrack_final/backend/backend_app/app"
    
    if [ ! -d "$BACKEND_DIR" ]; then
        echo -e "${RED}‚ùå Diret√≥rio backend n√£o encontrado!${NC}"
        return 1
    fi
    
    cd "$BACKEND_DIR"
    
    echo -e "${YELLOW}üîß Criando arquivos de configura√ß√£o para Railway...${NC}"
    
    # Criar railway.json
    cat > railway.json << 'EOF'
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "numReplicas": 1,
    "sleepApplication": false,
    "restartPolicyType": "ON_FAILURE"
  }
}
EOF
    
    # Criar Procfile para Railway
    cat > Procfile << 'EOF'
web: java -Dserver.port=$PORT -Dspring.profiles.active=railway -jar target/*.jar
EOF
    
    # Criar nixpacks.toml para Railway
    cat > nixpacks.toml << 'EOF'
[phases.build]
cmds = ["mvn clean package -DskipTests"]

[phases.start]
cmd = "java -Dserver.port=$PORT -Dspring.profiles.active=railway -jar target/*.jar"
EOF
    
    # Criar script de deploy
    cat > deploy-backend.sh << 'EOF'
#!/bin/bash

echo "üõ†Ô∏è FAZENDO DEPLOY DO BACKEND NO RAILWAY..."

# Verificar se Railway CLI est√° instalado
if ! command -v railway &> /dev/null; then
    echo "‚ùå Railway CLI n√£o encontrado. Instalando..."
    npm install -g @railway/cli
fi

# Login (ser√° solicitado)
echo "üîê Fazendo login no Railway..."
railway login

# Inicializar projeto
echo "üöÄ Inicializando projeto..."
railway link

# Deploy
echo "üöÄ Fazendo deploy..."
railway up

echo "‚úÖ Deploy do backend conclu√≠do!"
EOF
    
    chmod +x deploy-backend.sh
    
    # Criar application-railway.yml
    mkdir -p src/main/resources
    cat > src/main/resources/application-railway.yml << 'EOF'
spring:
  datasource:
    url: ${DATABASE_URL}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  redis:
    url: ${REDIS_URL}
  
server:
  port: ${PORT:8080}

jwt:
  secret: ${JWT_SECRET}
  expiration: 86400000

stripe:
  api-key: ${STRIPE_SECRET_KEY}
  webhook-secret: ${STRIPE_WEBHOOK_SECRET}

logging:
  level:
    com.saga.fitness: INFO
EOF
    
    echo
    echo -e "${GREEN}‚úÖ Backend preparado para deploy!${NC}"
    echo -e "${CYAN}üìã PR√ìXIMOS PASSOS:${NC}"
    echo -e "${YELLOW}1. Crie conta no Railway: https://railway.app${NC}"
    echo -e "${YELLOW}2. Execute: cd $BACKEND_DIR && ./deploy-backend.sh${NC}"
    echo -e "${YELLOW}3. Adicione bancos de dados no Railway:${NC}"
    echo -e "   - PostgreSQL"
    echo -e "   - Redis"
    echo -e "${YELLOW}4. Configure vari√°veis de ambiente:${NC}"
    echo -e "   - DATABASE_URL (automaticamente do PostgreSQL)"
    echo -e "   - REDIS_URL (automaticamente do Redis)"
    echo -e "   - JWT_SECRET=seu_jwt_secreto_super_seguro"
    echo -e "   - STRIPE_SECRET_KEY=sk_live_..."
    echo -e "   - STRIPE_WEBHOOK_SECRET=whsec_..."
    echo
    
    cd - > /dev/null
    read -p "Pressione Enter para continuar..."
}

# Preparar deploy mobile
prepare_mobile_deploy() {
    echo -e "${BLUE}üì± PREPARANDO DEPLOY MOBILE (EXPO)...${NC}"
    echo
    
    MOBILE_DIR="SAGA-Mobile"
    
    if [ ! -d "$MOBILE_DIR" ]; then
        echo -e "${RED}‚ùå Diret√≥rio mobile n√£o encontrado!${NC}"
        return 1
    fi
    
    cd "$MOBILE_DIR"
    
    echo -e "${YELLOW}üì¶ Instalando depend√™ncias do mobile...${NC}"
    if [ -f "package.json" ]; then
        npm install
    else
        echo -e "${RED}‚ùå package.json n√£o encontrado!${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}üîß Criando scripts de deploy mobile...${NC}"
    
    # Script para Android
    cat > deploy-android.sh << 'EOF'
#!/bin/bash

echo "ü§ñ FAZENDO DEPLOY ANDROID..."

# Verificar Expo CLI
if ! command -v eas &> /dev/null; then
    echo "‚ùå EAS CLI n√£o encontrado. Instalando..."
    npm install -g eas-cli
fi

# Login no Expo
echo "üîê Fazendo login no Expo..."
npx expo login

# Inicializar EAS
echo "‚öôÔ∏è Inicializando EAS..."
eas init

# Build APK para teste
echo "üèóÔ∏è Fazendo build APK para teste..."
eas build --platform android --profile preview

# Build AAB para produ√ß√£o
echo "üèóÔ∏è Fazendo build AAB para produ√ß√£o..."
eas build --platform android --profile production

echo "‚úÖ Build Android conclu√≠do!"
echo "üì≤ Para publicar no Google Play Store:"
echo "   eas submit --platform android"
EOF
    
    # Script para iOS
    cat > deploy-ios.sh << 'EOF'
#!/bin/bash

echo "üçé FAZENDO DEPLOY iOS..."

# Verificar Expo CLI
if ! command -v eas &> /dev/null; then
    echo "‚ùå EAS CLI n√£o encontrado. Instalando..."
    npm install -g eas-cli
fi

# Login no Expo
echo "üîê Fazendo login no Expo..."
npx expo login

# Build para TestFlight
echo "üèóÔ∏è Fazendo build para TestFlight..."
eas build --platform ios --profile preview

# Build para App Store
echo "üèóÔ∏è Fazendo build para App Store..."
eas build --platform ios --profile production

echo "‚úÖ Build iOS conclu√≠do!"
echo "üì≤ Para publicar na App Store:"
echo "   eas submit --platform ios"
EOF
    
    chmod +x deploy-android.sh
    chmod +x deploy-ios.sh
    
    # Criar script completo
    cat > deploy-mobile-complete.sh << 'EOF'
#!/bin/bash

echo "üì± DEPLOY COMPLETO MOBILE - ANDROID E iOS"

# Android
echo "ü§ñ Iniciando deploy Android..."
./deploy-android.sh

echo ""
echo "‚è≥ Aguardando 30 segundos antes do iOS..."
sleep 30

# iOS  
echo "üçé Iniciando deploy iOS..."
./deploy-ios.sh

echo ""
echo "‚úÖ Deploy mobile completo finalizado!"
EOF
    
    chmod +x deploy-mobile-complete.sh
    
    echo
    echo -e "${GREEN}‚úÖ Mobile preparado para deploy!${NC}"
    echo -e "${CYAN}üìã PR√ìXIMOS PASSOS:${NC}"
    echo -e "${YELLOW}1. Crie conta no Expo: https://expo.dev${NC}"
    echo -e "${YELLOW}2. Para Android:${NC}"
    echo -e "   - Crie conta Google Play Console ($25)"
    echo -e "   - Execute: cd $MOBILE_DIR && ./deploy-android.sh"
    echo -e "${YELLOW}3. Para iOS:${NC}"
    echo -e "   - Crie conta Apple Developer ($99/ano)"
    echo -e "   - Execute: cd $MOBILE_DIR && ./deploy-ios.sh"
    echo -e "${YELLOW}4. Para ambos: ./deploy-mobile-complete.sh${NC}"
    echo
    
    cd - > /dev/null
    read -p "Pressione Enter para continuar..."
}

# Configurar analytics
configure_analytics() {
    echo -e "${BLUE}üìä CONFIGURANDO ANALYTICS...${NC}"
    echo
    
    # Verificar se o arquivo j√° existe
    ANALYTICS_FILE="ubuntu/fittrack_final/frontend/frontend_app/hevyclone_frontend_improved/src/services/analyticsService.ts"
    
    if [ -f "$ANALYTICS_FILE" ]; then
        echo -e "${GREEN}‚úÖ Analytics j√° configurado!${NC}"
        echo -e "${CYAN}üìã Arquivo encontrado em: $ANALYTICS_FILE${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Arquivo de analytics n√£o encontrado${NC}"
    fi
    
    echo
    echo -e "${CYAN}üìã CONTAS NECESS√ÅRIAS PARA ANALYTICS:${NC}"
    echo -e "${YELLOW}1. Google Analytics 4:${NC}"
    echo -e "   - Acesse: https://analytics.google.com"
    echo -e "   - Crie propriedade GA4"
    echo -e "   - Copie Measurement ID (G-XXXXXXXXXX)"
    echo
    echo -e "${YELLOW}2. Mixpanel (opcional):${NC}"
    echo -e "   - Acesse: https://mixpanel.com"
    echo -e "   - Crie projeto"
    echo -e "   - Copie token do projeto"
    echo
    echo -e "${YELLOW}3. Facebook Pixel (opcional):${NC}"
    echo -e "   - Acesse: https://business.facebook.com"
    echo -e "   - Crie pixel"
    echo -e "   - Copie Pixel ID"
    echo
    
    read -p "Pressione Enter para continuar..."
}

# Configurar monetiza√ß√£o
configure_monetization() {
    echo -e "${BLUE}üí∞ CONFIGURANDO MONETIZA√á√ÉO...${NC}"
    echo
    
    # Verificar se o arquivo j√° existe
    PAYMENT_FILE="ubuntu/fittrack_final/frontend/frontend_app/hevyclone_frontend_improved/src/services/paymentService.ts"
    
    if [ -f "$PAYMENT_FILE" ]; then
        echo -e "${GREEN}‚úÖ Sistema de pagamentos j√° configurado!${NC}"
        echo -e "${CYAN}üìã Arquivo encontrado em: $PAYMENT_FILE${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Arquivo de pagamentos n√£o encontrado${NC}"
    fi
    
    echo
    echo -e "${CYAN}üìã CONFIGURA√á√ÉO STRIPE NECESS√ÅRIA:${NC}"
    echo -e "${YELLOW}1. Crie conta Stripe:${NC}"
    echo -e "   - Acesse: https://stripe.com"
    echo -e "   - Complete verifica√ß√£o da conta"
    echo -e "   - Ative modo produ√ß√£o"
    echo
    echo -e "${YELLOW}2. Configure produtos:${NC}"
    echo -e "   - SAGA Premium: R$ 29,90/m√™s"
    echo -e "   - SAGA Pro: R$ 79,90/m√™s"
    echo
    echo -e "${YELLOW}3. Copie chaves:${NC}"
    echo -e "   - Chave p√∫blica: pk_live_..."
    echo -e "   - Chave secreta: sk_live_..."
    echo -e "   - Webhook secret: whsec_..."
    echo
    echo -e "${YELLOW}4. Configure webhook:${NC}"
    echo -e "   - URL: https://seu-backend.railway.app/api/webhooks/stripe"
    echo -e "   - Eventos: customer.subscription.created, customer.subscription.updated"
    echo
    
    read -p "Pressione Enter para continuar..."
}

# Limpar reposit√≥rio
clean_repository() {
    echo -e "${BLUE}üßπ LIMPANDO E ORGANIZANDO REPOSIT√ìRIO...${NC}"
    echo
    
    if [ -f "cleanup-repository.sh" ]; then
        echo -e "${YELLOW}üîÑ Executando script de limpeza...${NC}"
        chmod +x cleanup-repository.sh
        ./cleanup-repository.sh
    else
        echo -e "${RED}‚ùå Script cleanup-repository.sh n√£o encontrado${NC}"
        echo -e "${YELLOW}üîÑ Executando limpeza b√°sica...${NC}"
        
        # Limpeza b√°sica
        find . -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name ".DS_Store" -delete 2>/dev/null || true
        find . -name "Thumbs.db" -delete 2>/dev/null || true
        find . -name "*.log" -delete 2>/dev/null || true
        find . -name "*.tmp" -delete 2>/dev/null || true
        
        echo -e "${GREEN}‚úÖ Limpeza b√°sica conclu√≠da${NC}"
    fi
    
    echo
    echo -e "${GREEN}‚úÖ Reposit√≥rio limpo e organizado!${NC}"
    read -p "Pressione Enter para continuar..."
}

# Gerar documenta√ß√£o
generate_documentation() {
    echo -e "${BLUE}üìö GERANDO DOCUMENTA√á√ÉO COMPLETA...${NC}"
    echo
    
    # Verificar se arquivos existem
    docs=(
        "README.md"
        "DEPLOY_GUIDE.md"
        "MOBILE_DEPLOY_GUIDE.md"
        "API_DOCUMENTATION.md"
    )
    
    for doc in "${docs[@]}"; do
        if [ -f "$doc" ]; then
            echo -e "${GREEN}‚úÖ $doc - ENCONTRADO${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $doc - FALTANDO${NC}"
        fi
    done
    
    echo
    echo -e "${CYAN}üìã DOCUMENTA√á√ÉO DISPON√çVEL:${NC}"
    echo -e "${YELLOW}1. README.md - Documenta√ß√£o principal do projeto${NC}"
    echo -e "${YELLOW}2. DEPLOY_GUIDE.md - Guia completo de deploy${NC}"
    echo -e "${YELLOW}3. MOBILE_DEPLOY_GUIDE.md - Guia deploy mobile${NC}"
    echo -e "${YELLOW}4. API_DOCUMENTATION.md - Documenta√ß√£o da API${NC}"
    echo
    
    read -p "Pressione Enter para continuar..."
}

# Mostrar contas necess√°rias
show_required_accounts() {
    echo -e "${BLUE}‚ùì CONTAS NECESS√ÅRIAS PARA DEPLOY COMPLETO${NC}"
    echo -e "${YELLOW}==============================================${NC}"
    echo
    
    echo -e "${CYAN}üåê FRONTEND (Netlify):${NC}"
    echo -e "${YELLOW}‚Ä¢ URL: https://netlify.com${NC}"
    echo -e "${YELLOW}‚Ä¢ Custo: GRATUITO${NC}"
    echo -e "${YELLOW}‚Ä¢ Login: GitHub recomendado${NC}"
    echo
    
    echo -e "${CYAN}üõ†Ô∏è BACKEND (Railway):${NC}"
    echo -e "${YELLOW}‚Ä¢ URL: https://railway.app${NC}"
    echo -e "${YELLOW}‚Ä¢ Custo: $5/m√™s ap√≥s trial${NC}"
    echo -e "${YELLOW}‚Ä¢ Login: GitHub recomendado${NC}"
    echo
    
    echo -e "${CYAN}üì± MOBILE (Expo):${NC}"
    echo -e "${YELLOW}‚Ä¢ URL: https://expo.dev${NC}"
    echo -e "${YELLOW}‚Ä¢ Custo: GRATUITO${NC}"
    echo -e "${YELLOW}‚Ä¢ Login: Email ou GitHub${NC}"
    echo
    
    echo -e "${CYAN}ü§ñ GOOGLE PLAY STORE:${NC}"
    echo -e "${YELLOW}‚Ä¢ URL: https://play.google.com/console${NC}"
    echo -e "${YELLOW}‚Ä¢ Custo: $25 (taxa √∫nica)${NC}"
    echo -e "${YELLOW}‚Ä¢ Requisito: Conta Google${NC}"
    echo
    
    echo -e "${CYAN}üçé APPLE APP STORE:${NC}"
    echo -e "${YELLOW}‚Ä¢ URL: https://developer.apple.com${NC}"
    echo -e "${YELLOW}‚Ä¢ Custo: $99/ano${NC}"
    echo -e "${YELLOW}‚Ä¢ Requisito: Apple ID${NC}"
    echo
    
    echo -e "${CYAN}üìä ANALYTICS:${NC}"
    echo -e "${YELLOW}‚Ä¢ Google Analytics: https://analytics.google.com (GRATUITO)${NC}"
    echo -e "${YELLOW}‚Ä¢ Mixpanel: https://mixpanel.com (GRATUITO at√© 1k users)${NC}"
    echo
    
    echo -e "${CYAN}üí∞ PAGAMENTOS:${NC}"
    echo -e "${YELLOW}‚Ä¢ Stripe: https://stripe.com (2.9% + 30¬¢ por transa√ß√£o)${NC}"
    echo
    
    echo -e "${GREEN}üí° TOTAL ESTIMADO MENSAL:${NC}"
    echo -e "${YELLOW}‚Ä¢ M√≠nimo: $5/m√™s (Railway)${NC}"
    echo -e "${YELLOW}‚Ä¢ Com iOS: $5/m√™s + $99/ano${NC}"
    echo -e "${YELLOW}‚Ä¢ Completo: ~$15-30/m√™s (dependendo do tr√°fego)${NC}"
    echo
    
    read -p "Pressione Enter para continuar..."
}

# Deploy completo
deploy_complete() {
    echo -e "${BLUE}üöÄ EXECUTANDO DEPLOY COMPLETO DO SAGA FITNESS!${NC}"
    echo -e "${YELLOW}=============================================${NC}"
    echo
    
    echo -e "${CYAN}üìã ETAPAS QUE SER√ÉO EXECUTADAS:${NC}"
    echo -e "${YELLOW}1. ‚úÖ Verificar estrutura do projeto${NC}"
    echo -e "${YELLOW}2. üåê Preparar deploy frontend${NC}"
    echo -e "${YELLOW}3. üõ†Ô∏è  Preparar deploy backend${NC}"
    echo -e "${YELLOW}4. üì± Preparar deploy mobile${NC}"
    echo -e "${YELLOW}5. üßπ Limpar reposit√≥rio${NC}"
    echo
    
    read -p "Deseja continuar com o deploy completo? (y/N): " confirm
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}‚ùå Deploy cancelado pelo usu√°rio${NC}"
        return
    fi
    
    echo -e "${GREEN}üöÄ Iniciando deploy completo...${NC}"
    echo
    
    # Executar todas as etapas
    check_project_structure
    prepare_frontend_deploy
    prepare_backend_deploy
    prepare_mobile_deploy
    clean_repository
    
    echo
    echo -e "${GREEN}üéâ DEPLOY COMPLETO PREPARADO COM SUCESSO!${NC}"
    echo -e "${YELLOW}=======================================${NC}"
    echo
    echo -e "${CYAN}üìã PR√ìXIMOS PASSOS:${NC}"
    echo -e "${YELLOW}1. Crie todas as contas necess√°rias (op√ß√£o 10)${NC}"
    echo -e "${YELLOW}2. Execute os scripts de deploy gerados:${NC}"
    echo -e "   - Frontend: ./deploy-frontend.sh"
    echo -e "   - Backend: ./deploy-backend.sh"
    echo -e "   - Mobile: ./deploy-mobile-complete.sh"
    echo -e "${YELLOW}3. Configure vari√°veis de ambiente${NC}"
    echo -e "${YELLOW}4. Teste todas as funcionalidades${NC}"
    echo
    echo -e "${GREEN}üèÜ SAGA FITNESS ESTAR√Å PRONTO PARA PRODU√á√ÉO!${NC}"
    echo
}

# Loop principal
main() {
    print_logo
    
    while true; do
        show_menu
        read -r choice
        
        case $choice in
            1)
                check_project_structure
                ;;
            2)
                prepare_frontend_deploy
                ;;
            3)
                prepare_backend_deploy
                ;;
            4)
                prepare_mobile_deploy
                ;;
            5)
                configure_analytics
                ;;
            6)
                configure_monetization
                ;;
            7)
                clean_repository
                ;;
            8)
                generate_documentation
                ;;
            9)
                deploy_complete
                ;;
            10)
                show_required_accounts
                ;;
            0)
                echo -e "${GREEN}üëã Obrigado por usar o SAGA FITNESS Deploy!${NC}"
                echo -e "${CYAN}üèãÔ∏è‚Äç‚ôÇÔ∏è Boa sorte com seu projeto fitness revolucion√°rio!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida. Escolha entre 0-10.${NC}"
                read -p "Pressione Enter para tentar novamente..."
                ;;
        esac
        
        clear
        print_logo
    done
}

# Executar script principal
main 
version: '3.8'

services:
  # Banco de dados PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: saga-database
    environment:
      POSTGRES_DB: saga
      POSTGRES_USER: saga_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-sua_senha_forte}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saga_user -d saga"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: saga-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Spring Boot
  backend:
    build:
      context: ./ubuntu/fittrack_final/backend/backend_app/app
      dockerfile: Dockerfile
    container_name: saga-backend
    environment:
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/saga
      SPRING_DATASOURCE_USERNAME: saga_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-sua_senha_forte}
      
      # Redis
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-seu_jwt_secret_super_forte_de_pelo_menos_256_bits}
      JWT_EXPIRATION_MS: 86400000
      
      # Profile
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      
      # CORS
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost}
      
      # Logs
      LOG_FILE_PATH: /app/logs/saga.log
    volumes:
      - backend_logs:/app/logs
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React
  frontend:
    build:
      context: ./ubuntu/fittrack_final/frontend/frontend_app/hevyclone_frontend_improved
      dockerfile: Dockerfile
    container_name: saga-frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  default:
    name: saga-network 